# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
#std
snippet stdio
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	#include <errno.h>
#function()
snippet )
	)
	{
		${1:}
	}
#socket
snippet socket
	#include <sys/socket.h>
	#include <arpa/inet.h>
	#include <netinet/in.h>
	#include <netinet/tcp.h>
	#include <netdb.h>

#net
snippet net
	#include <fcntl.h>
	#include <unistd.h>
	#include <sys/stat.h>

#include
snippet cpp
	#include <iostream>
	#include <string>
	#include <vector>
	#include <stdexcept>
#file
snippet file
	#include <fstream>
	#include <sstream>
#stl
snippet stl
	#include <list>
	#include <map>
	#include <set>
	#include <algorithm>
	#include <utility>
#using namespace std
snippet uss
	using namespace std;
#ifndef
snippet deff
	#ifndef $1
	#define ${1:HEAD_H_}

	#endif
#ERR_EXIT
snippet err
	#define ERR_EXIT(m) \
		do{ \
			perror(m);\
			exit(EXIT_FAILURE);\
		   }while(0)
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();

	private:
		${3:/* data */}
	};
snippet fori
	for ( int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
